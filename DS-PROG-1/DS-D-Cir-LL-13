#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
  struct node *prev;
  int id;
  char name[100];
  struct node *next;
};

void insert(struct node **head, int id, char *name) {
  struct node *newNode, *prev = NULL, *curr = *head;
  newNode = (struct node *)malloc(sizeof(struct node));
  newNode->id = id;
  strcpy(newNode->name, name);

  if (*head == NULL) {
    newNode->prev = newNode;
    newNode->next = newNode;
    *head = newNode;
  } else {
    if (id < (*head)->id) {
      while (curr->next != *head) {
        curr = curr->next;
      }
      curr->next = newNode;
      newNode->prev = curr;
      newNode->next = *head;
      (*head)->prev = newNode;
      *head = newNode;
    } else {
      while (curr->next != *head && id > curr->id) {
        prev = curr;
        curr = curr->next;
      }
      if (curr->next == *head && id > curr->id) {
        newNode->prev = curr;
        newNode->next = curr->next;
        curr->next->prev = newNode;
        curr->next = newNode;
      } else {
        newNode->prev = prev;
        newNode->next = curr;
        prev->next = newNode;
        curr->prev = newNode;
      }
    }
  }
}

void delete (struct node **head, int id) {
  struct node *curr = *head, *prev = NULL;
  if (*head == NULL) {
    printf("List is empty\n");
  } else {
    if (id == (*head)->id) {
      curr->prev->next = curr->next;
      curr->next->prev = curr->prev;
      if (curr->next == *head) {
        *head = NULL;
      } else {
        *head = curr->next;
      }
      free(curr);
    } else {
       {

        while (curr->next != *head && curr->id != id) {
          prev = curr;
          curr = curr->next;
        }

        if (curr->id == id) {
          prev->next = curr->next;
          curr->next->prev = prev;
        } else {
          printf("No element found\n");
        }
      }
    }
  }
}

void modify(struct node *head, int id, char *name) {
  struct node *temp = head;
  int flag = 0;
  if (head == NULL) {
    printf("List is empty\n");
  } else {
    do {
      if (temp->id == id) {
        stpcpy(temp->name, name);
        flag = 1;
        break;
      }
      temp = temp->next;
    } while (temp != head);

    if (flag == 0) {
      printf("No element found\n");
    }
  }
}

void display(struct node *head) {
  struct node *curr = head;
  if (head == NULL) {
    printf("List is empty\n");
  } else {
    do {
      printf("(%d - ", curr->id);
      printf("%s) --> ", curr->name);
      curr = curr->next;
    } while (curr != head);
  }
}

void main() {
  struct node *head = NULL;
  int element, newData, oldData, choice;
  int id;
  char name[100];

  while (1) {
    printf("\n1. Insert");
    printf("\n2. Delete");
    printf("\n3. Modify");
    printf("\n4. Display");
    printf("\n5. Exit");
    printf("\nEnter Choice : ");
    scanf("%d", &choice);
    switch (choice) {
    case 1:
      printf("Enter id : ");
      scanf("%d", &id);
      printf("Enter name : ");
      scanf("%s", name);
      insert(&head, id, name);
      break;

    case 2:
      printf("Enter id to delete : ");
      scanf("%d", &id);
      delete (&head, id);
      break;

    case 3:
      printf("Enter id to modify : ");
      scanf("%d", &id);
      printf("Enter new name : ");
      scanf("%s", name);
      modify(head, id, name);
      break;

    case 4:
      display(head);
      break;
    }
  }
}
